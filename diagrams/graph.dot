digraph doxygraph
{
graph [ rankdir="RL" ]
"classCEI" [ pos = "-4,-14!" label="CEI\n|+GetNeighbors ( dest : Iter, solution : const Solution & ) : Iter \{static\}\l|" shape="record" ]
"classCET" [ pos = "-4,-15.5!" label="CET\n|+GetNeighbors ( dest : Iter, solution : const Solution & ) : Iter \{static\}\l|" shape="record" ]
"classEvolutionaryAlgorithmLogger" [ pos = "17,-9!" label="EvolutionaryAlgorithmLogger\n|+AddLog ( average_quality : double, maximum_quality : double, msg : std::string ) : void\l+EvolutionaryAlgorithmLogger ( id : std::string, active : bool )\l+GetBestSolution (  ) : SolutionType\l+GetHistory ( dest : Iter ) : Iter\l+SetBestSolution ( solution : const SolutionType & ) : void\l|-active : bool\l-best_solution : std::optional\< SolutionType \>\l-history : std::vector\< Log \>\l-id : std::string\l" shape="record" ]
"classGOX" [ pos = "5,-17!" label="GOX\n|+Cross ( first1 : InputIt1, last1 : InputIt1, first2 : InputIt2, last2 : InputIt2, dest1 : OutputIt1, dest2 : OutputIt2,... ) : std::pair\< OutputIt1, OutputIt2 \> \{static\}\l-Implant ( first1 : InputIt1, last1 : InputIt1, first2 : InputIt2, last2 : InputIt2, dest : OutputIt, implant_position :... ) : OutputIt \{static\}\l|" shape="record" ]
"classGT" [ pos = "6,-8!" label="GT\n|+EvaluateSolution ( first : InputIt, last : InputIt, dest : OutputIt, problem : const Problem & ) : OutputIt \{static\}\l|" shape="record" ]
"classGenerational" [ pos = "2,-18.5!" label="Generational\n|+Choose (  : const Individual &,  : const Individual &, offspring1 : const Individual &, offspring2 : const Individual &... ) : std::pair\< std::reference_wrapper\< const Individual \>, std::reference_wrapper\< const Individual \> \> \{static\}\l|" shape="record" ]
"classEvolutionaryAlgorithm" [ pos = "15,-14!" label="EvolutionaryAlgorithm\n|+FindSolution ( logger : EvolutionaryAlgorithmLogger\< Solution \> &, problem : const Problem &, encoder_decoder : const E... ) : Solution \{static\}\l|" shape="record" ]
"classJSP" [ pos = "14,-1!" label="JSP\n|+AddJob ( jobID : unsigned int, due_date : DateType, weight : double ) : void\l+AddMachine ( machineID : unsigned int ) : void\l+AddTask ( taskID : unsigned int, jobID : unsigned int, machineID : unsigned int, duration : TimeType ) : void\l+GetFinalTasks ( dest : Iter ) : Iter\l+GetInitialTasks ( dest : Iter ) : Iter\l+GetJob ( jobID : unsigned int ) : const JobType &\l+GetJobTasks ( dest : Iter, jobID : unsigned int ) : Iter\l+GetJobs ( dest : Iter ) : Iter\l+GetMachine ( machineID : unsigned int ) : const MachineType &\l+GetMachineTasks ( dest : Iter, machineID : unsigned int ) : Iter\l+GetMachines ( dest : Iter ) : Iter\l+GetNumberOfJobs (  ) : std::size_t\l+GetNumberOfMachines (  ) : std::size_t\l+GetNumberOfTasks (  ) : std::size_t\l+GetNumberOfTasksInJob ( jobID : unsigned int ) : std::size_t\l+GetNumberOfTasksInMachine ( machineID : unsigned int ) : std::size_t\l+GetTask ( jobID : unsigned int, position : std::size_t ) : const TaskType &\l+GetTask ( taskID : unsigned int ) : const TaskType &\l+GetTasks ( dest : Iter ) : Iter\l|-job_tasks : std::unordered_map\< unsigned int, std::deque\< std::reference_wrapper\< const TaskType \> \> \>\l-jobs : std::unordered_map\< unsigned int, JobType \>\l-machine_tasks : std::unordered_map\< unsigned int, std::unordered_set\< std::reference_wrapper\< const TaskType \>, std::hash\< TaskType \>, std::equal_to\< TaskType \> \> \>\l-machines : std::unordered_map\< unsigned int, MachineType \>\l-tasks : std::unordered_map\< unsigned int, TaskType \>\l" shape="record" ]
"classJSPJob" [ pos = "2,-2.5!" label="JSPJob\n|+GetDueDate (  ) : DateType\l+GetJobID (  ) : unsigned int\l+GetWeight (  ) : double\l+JSPJob ( jobID : unsigned int, due_date : DateType, weight : double )\l|-due_date : DateType\l-jobID : unsigned int\l-weight : double\l" shape="record" ]
"classJSPMachine" [ pos = "-3,-2.5!" label="JSPMachine\n|+GetMachineID (  ) : unsigned int\l+JSPMachine ( machineID : unsigned int )\l|-machineID : unsigned int\l" shape="record" ]
"classJSPMakespanMinimizationSolution" [  pos = "0,6!" label="JSPMakespanMinimizationSolution\n|+AddCapacityConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+AddPrecedenceConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+AddTask ( task : const TaskType & ) : void\l+ApplyMove ( move : const Move & ) : void\l+ExchangeTasks ( task1 : const TaskType &, task2 : const TaskType & ) : void\l+GetCriticalBlocks ( dest : Iter ) : Iter\l+GetCriticalTasks ( dest : Iter ) : Iter\l+GetFinalTasks ( dest : Iter ) : Iter\l+GetHead ( task : const TaskType & ) : TimeType\l+GetInitialTasks ( dest : Iter ) : Iter\l+GetMakespan (  ) : TimeType\l+GetNextCapacityConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetNextPrecedenceConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetNextTasks ( task : const TaskType & ) : std::pair\< std::optional\< std::reference_wrapper\< const TaskType \> \>, std::optional\< std::reference_wrapper\< const TaskType \> \> \>\l+GetPrevCapacityConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetPrevPrecedenceConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetPrevTasks ( task : const TaskType & ) : std::pair\< std::optional\< std::reference_wrapper\< const TaskType \> \>, std::optional\< std::reference_wrapper\< const TaskType \> \> \>\l+GetProblem (  ) : const ProblemType &\l+GetQuality (  ) : double\l+GetTail ( task : const TaskType & ) : TimeType\l+GetTasks ( dest : Iter ) : Iter\l+GetTasksTopologicalOrder ( dest : Iter ) : Iter\l+HasTails (  ) : constexpr bool \{static\}\l+JSPMakespanMinimizationSolution ( problem : const ProblemType & )\l+RemoveCapacityConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+RemovePrecedenceConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+SolutionSequence (  ) : std::string\l+ToString (  ) : std::string\l-EqualTime ( n1 : const TimeType &, n2 : const TimeType & ) : bool\l-UpdateHeadsAndTails (  ) : void\l|-changes : std::unordered_set\< std::reference_wrapper\< const TaskType \>, std::hash\< TaskType \>, std::equal_to\< TaskType \> \> \{mutable\}\l-disjunctive_graph : std::unordered_map\< std::reference_wrapper\< const TaskType \>, TaskMetadata, std::hash\< TaskType \>, std::equal_to\< TaskType \> \> \{mutable\}\l-makespan : TimeType \{mutable\}\l-problem : std::reference_wrapper\< const ProblemType \>\l" shape="record" ]
"classJSPMove" [ pos = "4,-12.5!" label="JSPMove\n|+AddChange ( from : const TaskType &, to : const TaskType & ) : void\l+GetChanges ( dest : Iter ) : Iter\l+Invert (  ) : JSPMove &\l|-changes : std::vector\< std::pair\< std::reference_wrapper\< const TaskType \>, std::reference_wrapper\< const TaskType \> \> \>\l" shape="record" ]
"classJSPRandomPopulationGenerator" [ label="JSPRandomPopulationGenerator\n|+GetIndividuals ( dest : Iter, problem : const Problem &, population_size : unsigned int, rng : RNG & ) : Iter \{static\}\l|" shape="record" ]
"classJSPTask" [ pos = "0,0.5!" label="JSPTask\n|+GetDuration (  ) : TimeType\l+GetJob (  ) : const JobType &\l+GetMachine (  ) : const MachineType &\l+GetPosition (  ) : std::size_t\l+GetTaskID (  ) : unsigned int\l+JSPTask ( taskID : unsigned int, job : const JobType &, machine : const MachineType &, position : std::size_t, duration... )\l|-duration : TimeType\l-job : std::reference_wrapper\< const JobType \>\l-machine : std::reference_wrapper\< const MachineType \>\l-position : std::size_t\l-taskID : unsigned int\l" shape="record" ]
"classJSPTotalWeightedTardinessMinimizationSolution" [ pos = "14,6!" label="JSPTotalWeightedTardinessMinimizationSolution\n|+AddCapacityConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+AddPrecedenceConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+AddTask ( task : const TaskType & ) : void\l+ApplyMove ( move : const Move & ) : void\l+ExchangeTasks ( task1 : const TaskType &, task2 : const TaskType & ) : void\l+GetCriticalBlocks ( dest : Iter ) : Iter\l+GetCriticalTasks ( dest : Iter ) : Iter\l+GetFinalTasks ( dest : Iter ) : Iter\l+GetHead ( task : const TaskType & ) : TimeType\l+GetInitialTasks ( dest : Iter ) : Iter\l+GetNextCapacityConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetNextPrecedenceConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetNextTasks ( task : const TaskType & ) : std::pair\< std::optional\< std::reference_wrapper\< const TaskType \> \>, std::optional\< std::reference_wrapper\< const TaskType \> \> \>\l+GetPrevCapacityConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetPrevPrecedenceConstrainedTask ( task : const TaskType & ) : std::optional\< std::reference_wrapper\< const TaskType \> \>\l+GetPrevTasks ( task : const TaskType & ) : std::pair\< std::optional\< std::reference_wrapper\< const TaskType \> \>, std::optional\< std::reference_wrapper\< const TaskType \> \> \>\l+GetProblem (  ) : const ProblemType &\l+GetQuality (  ) : double\l+GetTail ( task : const TaskType &, job : const JobType & ) : TimeType\l+GetTasks ( dest : Iter ) : Iter\l+GetTasksTopologicalOrder ( dest : Iter ) : Iter\l+GetTotalWeightedTardiness (  ) : TimeType\l+HasTails (  ) : constexpr bool \{static\}\l+JSPTotalWeightedTardinessMinimizationSolution ( problem : const ProblemType & )\l+RemoveCapacityConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+RemovePrecedenceConstraint ( from : const TaskType &, to : const TaskType & ) : void\l+SolutionSequence (  ) : std::string\l+ToString (  ) : std::string\l-EqualTime ( n1 : const TimeType &, n2 : const TimeType & ) : bool\l-UpdateHeadsAndTails (  ) : void\l|-changes : std::unordered_set\< std::reference_wrapper\< const TaskType \>, std::hash\< TaskType \>, std::equal_to\< TaskType \> \> \{mutable\}\l-disjunctive_graph : std::unordered_map\< std::reference_wrapper\< const TaskType \>, TaskMetadata, std::hash\< TaskType \>, std::equal_to\< TaskType \> \> \{mutable\}\l-problem : std::reference_wrapper\< const ProblemType \>\l-total_weighted_tardiness : TimeType \{mutable\}\l" shape="record" ]
"classLauncher" [ pos = "-4,-10!" label="Launcher\n|+Solve ( instance : std::ifstream &, output : std::ofsteam & )\l|" shape="record" ]
"classLauncher" -> "classJSPMakespanMinimizationSolution" []
"classLauncher" -> "classJSPRandomPopulationGenerator" []
"classRouletteWheelSelection"
"classLauncher" -> "classRouletteWheelSelection" []
"classTabuSearchFixedLength"
"classLauncher" -> "classTabuSearchFixedLength" []
"classLauncher" -> "classJSPMachine" []
"classLauncher" -> "classEvolutionaryAlgorithm" []
"classPairSelection"
"classLauncher" -> "classPairSelection" []
"classTournament"
"classLauncher" -> "classTournament" []
"classPermutationWithRepetition"
"classLauncher" -> "classPermutationWithRepetition" []
"classLauncher" -> "classCEI" []
"classLauncher" -> "classJSPMove" []
"classLauncher" -> "classCET" []
"classLauncher" -> "classJSPTotalWeightedTardinessMinimizationSolution" []
"classLauncher" -> "classGenerational" []
"classMemeticAlgorithm"
"classLauncher" -> "classMemeticAlgorithm" []
"classTabuSearchVariableLength"
"classLauncher" -> "classTabuSearchVariableLength" []
"classLauncher" -> "classEvolutionaryAlgorithmLogger" []
"classLauncher" -> "classJSPTask" []
"classLauncher" -> "classGT" []
"classLauncher" -> "classJSPJob" []
"classTriangularFuzzyNumber"
"classLauncher" -> "classTriangularFuzzyNumber" []
"classLauncher" -> "classGOX" []
"classSwap"
"classLauncher" -> "classSwap" []
"classLauncher" -> "classJSP" []
"classLocalSearchLogger"
"classLauncher" -> "classLocalSearchLogger" []
"classLocalSearchLogger" [ pos = "16,-6!" label="LocalSearchLogger\n|+AddLog ( quality : double, neighbors_generated : unsigned int, neighbors_evaluated : unsigned int, msg : std::string ) : void\l+GetBestSolution (  ) : SolutionType\l+GetHistory ( dest : Iter ) : Iter\l+GetInitialSolution (  ) : SolutionType\l+LocalSearchLogger ( id : std::string, active : bool )\l+SetBestSolution ( solution : const SolutionType & ) : void\l+SetInitialSolution ( solution : const SolutionType & ) : void\l|-active : bool\l-best_solution : std::optional\< SolutionType \>\l-history : std::vector\< Log \>\l-id : std::string\l-initial_solution : std::optional\< SolutionType \>\l" shape="record" ]
"classMemeticAlgorithm" [ pos = "15,-15.5!" label="MemeticAlgorithm\n|+FindSolution ( evolutionary_logger : EvolutionaryAlgorithmLogger\< Solution \> &, local_logger : LocalSearchLogger\< Solut... ) : Solution \{static\}\l|" shape="record" ]
"classPairSelection" [ pos = "4,-15.5!" label="PairSelection\n|+Select ( first : InputIt, last : InputIt, dest : OutputIt, number : std::size_t, rng : RNG & ) : OutputIt \{static\}\l|" shape="record" ]
"classPermutationWithRepetition" [ pos = "5.5,-6!" label="PermutationWithRepetition\n|+DecodeSolution ( first : Iter, last : Iter, problem : const Problem & ) : Solution \{static\}\l+EncodeSolution ( dest : Iter, solution : const Solution & ) : Iter \{static\}\l+EvaluateSolutionMakespan ( first : Iter, last : Iter, problem : const Problem & ) : Problem::TimeType \{static\}\l+EvaluateSolutionQuality ( first : Iter, last : Iter, problem : const Problem & ) : double \{static\}\l+EvaluateSolutionTotalWeightedTardiness ( first : Iter, last : Iter, problem : const Problem & ) : Problem::TimeType \{static\}\l-CalculatePriorities ( first : InputIt, last : InputIt, dest : OutputIt, problem : const Problem & ) : OutputIt \{static\}\l|" shape="record" ]
"classRouletteWheelSelection" [ pos = "4,-14!" label="RouletteWheelSelection\n|+Select ( first : InputIt, last : InputIt, dest : OutputIt, number : std::size_t, rng : RNG & ) : OutputIt \{static\}\l|" shape="record" ]
"classSwap" [ pos = "-4,-17!" label="Swap\n|+Mutate ( first : Iter, last : Iter, rng : RNG & ) : void \{static\}\l|" shape="record" ]
"classTabuSearchFixedLength" [ pos = "15,-11!" label="TabuSearchFixedLength\n|+FindSolution ( logger : LocalSearchLogger\< Solution \> &, initial_solution : const Solution &, tabu_list_size : unsigned... ) : Solution \{static\}\l|" shape="record" ]
"classTabuSearchVariableLength" [ pos = "15,-12.5!" label="TabuSearchVariableLength\n|+FindSolution ( logger : LocalSearchLogger\< Solution \> &, initial_solution : const Solution &, min : unsigned int, max :... ) : Solution \{static\}\l|" shape="record" ]
"classTournament" [ pos = "2,-20!" label="Tournament\n|+Choose ( parent1 : const Individual &, parent2 : const Individual &, offspring1 : const Individual &, offspring2 : cons... ) : std::pair\< std::reference_wrapper\< const Individual \>, std::reference_wrapper\< const Individual \> \> \{static\}\l|" shape="record" ]
"classTriangularFuzzyNumber" [ pos = "15,-18!" label="TriangularFuzzyNumber\n|+ExpectedValue (  ) : T\l+GetLargest (  ) : T\l+GetMostProbable (  ) : T\l+GetSmallest (  ) : T\l+TriangularFuzzyNumber (  )\l+TriangularFuzzyNumber ( smallest : T, most_probable : T, largest : T )\l+operator * ( lhs : TriangularFuzzyNumber, rhs : const T & ) : friend TriangularFuzzyNumber\l|-largest : T\l-most_probable : T\l-smallest : T\l" shape="record" ]
}
